# MAM.ts

This library is based on the MAM Client JS Library from the IOTA Foundation. It has been converted to Typescript in order to work with the latest IOTA.js library (Typescript). It is coupled to the rust implementation of MAM from the IOTA Foundation.

MAM.ts consists of several classes that handle the MAM logic. 
1. **MamWriter**: The writer class that publishes MAM transactions to the IOTA network. 
2. **MamReader**: A reader class that reads MAM transactions from a stream from a given root. Can read per transaction or can catch up on the stream. 
3. **MamListener**: (Under development) A reader class that checks for new MAM transactions at a set interval. 
4. **ZMQListener**: (Future feature) A reader class that has a ZMQ stream connection with a node and listens to all transactions and calls a callback when a MAM transaction is found. 

MAM.ts is still under development and could contain bugs. More features are still planned and can be found in the future updates section. MAM.ts plans to support future updates to Masked Authenticated Messaging from the IOTA Foundation like MAM+ / MAMv2. 

## Masked Authenticated Messaging

It is possible to publish transactions to the Tangle that contain only messages, with no value. This introduces many possibilities for data integrity and communication, but comes with the caveat that message-only signatures are not checked. What we introduce is a method of symmetric-key encrypted, signed data that takes advantage of merkle-tree winternitz signatures for extended public key usability, that can be found trivially by those who know to look for it.

This is wrapper library for the WASM/ASM.js output of the [IOTA Bindings repository](https://github.com/iotaledger/iota-bindings). For a more in depth look at how Masked Authenticated Messaging works please check out the [Overview](https://github.com/l3wi/mam.client.js/blob/master/docs/overview.md)

## Getting Started

TODO: NPM install instruction when published

## API Reference

{{#module name="mam.ts"~}}
    {{>body~}}
        {{>member-index~}}
        {{>members~}}
{{/module~}}

## Building `IOTA.js`

1. Install Rust

```
curl https://sh.rustup.rs -sSf | sh
```
See https://www.rustup.rs/

2. Update to `nightly`

```
rustup default nightly
rustup update
```

3. Install `Emscripten`

```
cd
# Get the emsdk repo
git clone https://github.com/juj/emsdk.git

# Enter that directory
cd emsdk

# Fetch the latest registry of available tools.
./emsdk update

# Download and install the latest SDK tools.
./emsdk install latest

# Make the "latest" SDK "active" for the current user. (writes ~/.emscripten file)
./emsdk activate latest

# Activate PATH and other environment variables in the current terminal
source ./emsdk_env.sh
```

See https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html


4. Clone latest `iota-bindings` Repo, then compile content of the `emscripten` to `IOTA.js`
```
git clone git@github.com:iotaledger/iota-bindings.git
cd iota-bindings/emscripten
rustup target install asmjs-unknown-emscripten
cargo build --release --target asmjs-unknown-emscripten
```

5. Navigate to `iota-bindings/emscripten/target/asmjs-unknown-emscripten/release` and look for `IOTA.js`

6. Add `module.exports = Module;` at the very end of `IOTA.js` file
